{
	"info": {
		"_postman_id": "ai-code-review-agent-collection",
		"name": "AI Code Review Agent API - Updated Collection",
		"description": "âœ… UPDATED API collection for testing the AI Code Review Agent endpoints. This collection matches the current route structure with proper API v1 endpoints for submitting repository/PR analysis, checking status, retrieving results, and health monitoring. Supports both repository scanning and PR analysis.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "ai-code-review-agent"
	},
	"item": [
		{
			"name": "Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has status field\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('status');",
							"    pm.expect(jsonData.status).to.eql('healthy');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}/health",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"health"
					]
				},
				"description": "Check the health status of the AI Code Review Agent API."
			},
			"response": []
		},
		{
			"name": "Root Endpoint",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has message field\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						""
					]
				},
				"description": "Root endpoint that returns basic application information."
			},
			"response": []
		},
		{
			"name": "Submit Repository Analysis",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202\", function () {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Response has task_id\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('task_id');",
							"    pm.expect(jsonData.task_id).to.be.a('string');",
							"    pm.environment.set('task_id', jsonData.task_id);",
							"});",
							"",
							"pm.test(\"Response has correct status\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('status');",
							"    pm.expect(jsonData.status).to.eql('queued');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"repo_url\": \"https://github.com/sanketugale/vuln_LLM\",\n    \"analysis_type\": \"comprehensive\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/v1/analysis/analyze-pr",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"analysis",
						"analyze-pr"
					]
				},
				"description": "Submit a GitHub repository for AI-powered code analysis. This scans the entire repository without focusing on a specific PR."
			},
			"response": []
		},
		{
			"name": "Submit PR Analysis",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202\", function () {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Response has task_id\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('task_id');",
							"    pm.environment.set('pr_task_id', jsonData.task_id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"repo_url\": \"https://github.com/octocat/Hello-World\",\n    \"pr_number\": 1,\n    \"analysis_type\": \"comprehensive\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/v1/analysis/analyze-pr",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"analysis",
						"analyze-pr"
					]
				},
				"description": "Submit a specific GitHub pull request for analysis. This focuses on changes in the PR rather than the entire repository."
			},
			"response": []
		},
		{
			"name": "Get Task Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has required fields\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('task_id');",
							"    pm.expect(jsonData).to.have.property('status');",
							"    pm.expect(jsonData).to.have.property('progress');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/v1/analysis/status/{{task_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"analysis",
						"status",
						"{{task_id}}"
					]
				},
				"description": "Retrieve the current status and progress of an analysis task using the task ID from a previous analysis submission."
			},
			"response": []
		},
		{
			"name": "Get Task Status - Manual ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 404\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Response has required fields\", function () {",
							"        const jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property('task_id');",
							"        pm.expect(jsonData).to.have.property('status');",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/v1/analysis/status/test-task-123",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"analysis",
						"status",
						"test-task-123"
					]
				},
				"description": "Get status for a specific task ID (replace with actual task ID)."
			},
			"response": []
		},
		{
			"name": "Get Analysis Results",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 404\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Response has task_id\", function () {",
							"        const jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property('task_id');",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/v1/analysis/results/{{task_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"analysis",
						"results",
						"{{task_id}}"
					]
				},
				"description": "Retrieve the detailed analysis results for a completed task."
			},
			"response": []
		},
		{
			"name": "List All Tasks",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/v1/analysis/tasks",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"analysis",
						"tasks"
					]
				},
				"description": "List all analysis tasks with their current status and basic information."
			},
			"response": []
		},
		{
			"name": "List Tasks - Filtered by Repo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/v1/analysis/tasks?repo_url=https://github.com/octocat/Hello-World",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"analysis",
						"tasks"
					],
					"query": [
						{
							"key": "repo_url",
							"value": "https://github.com/octocat/Hello-World"
						}
					]
				},
				"description": "List tasks filtered by repository URL."
			},
			"response": []
		},
		{
			"name": "List Tasks - Filtered by PR Number",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an('array');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/v1/analysis/tasks?pr_number=1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"analysis",
						"tasks"
					],
					"query": [
						{
							"key": "pr_number",
							"value": "1"
						}
					]
				},
				"description": "List tasks filtered by pull request number."
			},
			"response": []
		},
		{
			"name": "GitHub Webhook (Test)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has message\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "X-GitHub-Event",
						"value": "pull_request"
					},
					{
						"key": "X-GitHub-Delivery",
						"value": "test-delivery-12345"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"action\": \"opened\",\n    \"number\": 1,\n    \"pull_request\": {\n        \"id\": 1,\n        \"number\": 1,\n        \"state\": \"open\",\n        \"title\": \"Test PR\",\n        \"body\": \"This is a test pull request\",\n        \"base\": {\n            \"repo\": {\n                \"full_name\": \"octocat/Hello-World\",\n                \"html_url\": \"https://github.com/octocat/Hello-World\"\n            }\n        }\n    },\n    \"repository\": {\n        \"full_name\": \"octocat/Hello-World\",\n        \"html_url\": \"https://github.com/octocat/Hello-World\"\n    }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/webhook",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"webhook"
					]
				},
				"description": "Test webhook endpoint that simulates GitHub webhook events for pull request activities."
			},
			"response": []
		},
		{
			"name": "Submit Invalid PR Analysis (Error Test)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response has error details\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('detail');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"repo_url\": \"invalid-url\",\n    \"pr_number\": -1,\n    \"analysis_type\": \"comprehensive\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/v1/analysis/analyze-pr",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"analysis",
						"analyze-pr"
					]
				},
				"description": "Test error handling with invalid input data."
			},
			"response": []
		},
		{
			"name": "Submit Repository Analysis with GitHub Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202\", function () {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Response has task_id\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('task_id');",
							"    pm.environment.set('auth_task_id', jsonData.task_id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"repo_url\": \"https://github.com/sanketugale/accc\",\n    \"analysis_type\": \"comprehensive\",\n    \"github_token\": \"{{github_token}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/v1/analysis/analyze-pr",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"v1",
						"analysis",
						"analyze-pr"
					]
				},
				"description": "Submit a repository analysis with a custom GitHub token for accessing private repositories or increased rate limits."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set timestamp for unique task identification",
					"pm.globals.set('timestamp', Date.now());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script - runs after every request",
					"pm.test(\"Response time is less than 5000ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"pm.test(\"Response has proper content-type\", function () {",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string",
			"description": "Base URL for the AI Code Review Agent API"
		},
		{
			"key": "task_id",
			"value": "",
			"type": "string",
			"description": "Task ID from the last repository analysis submission"
		},
		{
			"key": "pr_task_id",
			"value": "",
			"type": "string",
			"description": "Task ID from the last PR analysis submission"
		},
		{
			"key": "security_task_id",
			"value": "",
			"type": "string",
			"description": "Task ID from the last security-focused analysis"
		},
		{
			"key": "auth_task_id",
			"value": "",
			"type": "string",
			"description": "Task ID from the last authenticated analysis"
		},
		{
			"key": "github_token",
			"value": "ghp_YOUR_TOKEN_HERE",
			"type": "string",
			"description": "GitHub personal access token for API requests"
		}
	]
}
